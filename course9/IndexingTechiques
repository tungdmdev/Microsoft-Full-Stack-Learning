CREATE DATABASE SalesDB;
USE SalesDB;

CREATE TABLE Orders (
    OrderID INT AUTO_INCREMENT PRIMARY KEY,
    OrderDate DATETIME,
    CustomerID INT,
    TotalAmount DECIMAL(10, 2)
);

DELIMITER $$

CREATE PROCEDURE PopulateOrders()
BEGIN
    DECLARE i INT DEFAULT 1;
    WHILE i <= 3000 DO
        INSERT INTO Orders (OrderDate, CustomerID, TotalAmount)
        VALUES (
            DATE_ADD('2024-01-01', INTERVAL FLOOR(RAND() * 90) DAY), -- Random date in Quarter 1 2024
            FLOOR(RAND() * 100) + 1, -- Random CustomerID between 1 and 100
            ROUND(RAND() * 1000, 2) -- Random TotalAmount between 0 and 1000
        );
        SET i = i + 1;
    END WHILE;
END $$

DELIMITER ;

CALL PopulateOrders();

SELECT COUNT(*) AS TotalRows FROM Orders;

Measure Baseline Query Performance
Enable query timing by running:

SET PROFILING = 1;

Execute the following query and measure its execution time 

SELECT * FROM Orders 
WHERE OrderDate BETWEEN '2024-02-01' AND '2024-02-15'
  AND TotalAmount > 500;

View the profiling information by running:

SHOW PROFILES;

Create Indexes
Create a single-column index on the OrderDate column:

CREATE INDEX idx_order_date ON Orders(OrderDate);

Create another single-column index on the CustomerID column:

CREATE INDEX idx_customer_id ON Orders(CustomerID);

Verify the indexes were created by running:

SHOW INDEX FROM Orders;

Measure Query Performance After Indexing
Rerun the same query from Step 2: 

SELECT * FROM Orders 
WHERE OrderDate BETWEEN '2024-02-01' AND '2024-02-15'
  AND TotalAmount > 500;

View the profiling information again using:

SHOW PROFILES;

Note the updated execution time and compare it to the baseline. It should show some improvement

Analyze Query Execution Plans
Use the EXPLAIN command to analyze the query:

EXPLAIN SELECT * FROM Orders 
WHERE OrderDate BETWEEN '2024-02-01' AND '2024-02-15'
  AND TotalAmount > 500;

Experiment with Composite Indexes
Drop the existing single-column index on CustomerID:

DROP INDEX idx_customer_id ON Orders;

Create a composite index on OrderDate and TotalAmount:

CREATE INDEX idx_order_date_total ON Orders(OrderDate, TotalAmount);

Rerun the query from Step 2 and measure the execution time again:

SELECT * FROM Orders 
WHERE OrderDate BETWEEN '2024-02-01' AND '2024-02-15'
  AND TotalAmount > 500;

Use the EXPLAIN command to confirm that the composite index is being used:

EXPLAIN SELECT * FROM Orders 
WHERE OrderDate BETWEEN '2024-02-01' AND '2024-02-15'
  AND TotalAmount > 500;