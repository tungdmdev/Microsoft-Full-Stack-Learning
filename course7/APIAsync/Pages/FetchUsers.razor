@page "/fetchusers"
@inject HttpClient Http
@rendermode InteractiveServer

<h3>Users</h3>
<button @onclick="LoadUsers">Fetch New Users</button>

@if (isLoading)
{
    <div>Loading...</div>
}
else if (!string.IsNullOrEmpty(errorMessage))
{
    <p class="error">@errorMessage</p>
}
else if (users != null)
{
    <table>
        <thead>
            <tr>
                <th>ID</th>
                <th>Name</th>
                <th>Email</th>
                <th>City</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var user in users)
            {
                <tr>
                    <td>@user.Id</td>
                    <td>@user.Name</td>
                    <td>@user.Email</td>
                    <td>@user.Address.City</td>
                </tr>
            }
        </tbody>
    </table>
}
else
{
    <p>No data available.</p>
}

@code {
    private List<User>? users = null;
    private bool isLoading = false;
    private string? errorMessage = null;

    private async Task LoadUsers()
    {
        isLoading = true;
        errorMessage = null;
        users = null;

        try
        {
            users = await Http.GetFromJsonAsync<List<User>>("https://jsonplaceholder.typicode.com/users");
        }
        catch (Exception ex)
        {
            errorMessage = $"Error fetching data: {ex.Message}";
        }
        finally
        {
            isLoading = false;
        }
    }
}